spring:
  kafka:
    bootstrap-servers: localhost:9092

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        # avoid adding type headers (useful for interoperability)
        spring.json.add.type.headers: false
        # producer timeout and retry settings
        request.timeout.ms: 30000
        retry.backoff.ms: 1000
        retries: 2147483647
        delivery.timeout.ms: 120000
        # Connection settings
        connections.max.idle.ms: 540000
        reconnect.backoff.ms: 50
        reconnect.backoff.max.ms: 1000

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: grading-consumer-group
      auto-offset-reset: earliest
      properties:
        spring.json.trusted.packages: com.example.softwarebackend.dto
        session.timeout.ms: 45000
        heartbeat.interval.ms: 3000
        request.timeout.ms: 30000
        # Connection settings
        connections.max.idle.ms: 540000
        reconnect.backoff.ms: 50
        reconnect.backoff.max.ms: 1000

    listener:
      # consume record by record but allow multiple threads
      concurrency: 3
      type: single

    admin:
      # admin client settings
      properties:
        connections.max.idle.ms: 10000
      fail-fast: false

app:
  kafka:
    topic: code-submissions
    dlq-topic: code-submissions-dlq

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      geminiService:
        # Circuit breaker opens when 50% of calls fail
        failure-rate-threshold: 50
        # Minimum number of calls before circuit breaker can trip
        minimum-number-of-calls: 5
        # Time the circuit breaker stays open before allowing test calls
        wait-duration-in-open-state: 30s
        # Number of calls in half-open state to determine if circuit should close
        permitted-number-of-calls-in-half-open-state: 3
        # Sliding window size for monitoring calls
        sliding-window-size: 10
        # Type of sliding window (COUNT_BASED or TIME_BASED)
        sliding-window-type: COUNT_BASED
        # Exceptions that should be recorded as failures
        record-exceptions:
          - java.lang.Exception
        # Exceptions that should be ignored (not counted as failure or success)
        ignore-exceptions:
          - java.lang.IllegalArgumentException

  retry:
    instances:
      geminiService:
        # Maximum number of retry attempts
        max-attempts: 3
        # Wait duration between retry attempts
        wait-duration: 2s
        # Exponential backoff multiplier
        exponential-backoff-multiplier: 2
        # Maximum wait duration
        exponential-max-wait-duration: 10s
        # Exceptions that should trigger a retry
        retry-exceptions:
          - java.lang.Exception
        # Exceptions that should not trigger a retry
        ignore-exceptions:
          - java.lang.IllegalArgumentException

